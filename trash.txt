          <table className="table card-body px-3">
            {/* head */}
            <thead>
              <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Access status</th>
                <th></th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {/* rows */}
              {doctor.map(hospital => (
              <tr key={hospital.id}>
                <td>
                  <div className="flex items-center gap-3">
                    <div className="avatar">
                      <div className="mask mask-squircle w-12 h-12">
                        <img src={hospital.logo} alt="Avatar Tailwind CSS Component" />
                      </div>
                    </div>
                    <div>
                      <div className="font-bold">{hospital.name}</div>
                      {/* <div className="text-sm opacity-50">United States</div> */}
                    </div>
                  </div>
                </td>
                <td>
                  {hospital.address}
                </td>
                <td><span className={`badge badge-ghost badge-md ${hospital.accessStatus.toLowerCase() === "granted" ? "text-success" : "text-secondary"}`}>{hospital.accessStatus}</span></td>
                <th>
                  <button className="btn btn-ghost btn-xs">
                  <svg width="16px" height="16px" viewBox="-2.4 -2.4 28.80 28.80" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#05e654"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#CCCCCC" stroke-width="0.048"></g><g id="SVGRepo_iconCarrier"> <path d="M15.0007 12C15.0007 13.6569 13.6576 15 12.0007 15C10.3439 15 9.00073 13.6569 9.00073 12C9.00073 10.3431 10.3439 9 12.0007 9C13.6576 9 15.0007 10.3431 15.0007 12Z" stroke="#ff00d0" stroke-width="0.648" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M12.0012 5C7.52354 5 3.73326 7.94288 2.45898 12C3.73324 16.0571 7.52354 19 12.0012 19C16.4788 19 20.2691 16.0571 21.5434 12C20.2691 7.94291 16.4788 5 12.0012 5Z" stroke="#ff00d0" stroke-width="0.648" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
                  </button>
                </th>
                <th className=' card-actions'>
                  <button className='btn btn-sm  bg-accent' onClick={() => grantAccess(hospital.name)}>Grant</button>
                  <button className='btn btn-sm bg-error' onClick={() => revokeAccess(hospital.name)}>Revoke</button>
                </th>
              </tr>))}
            </tbody>            
          </table>

          // pages/medical-report.tsx

          import { useState } from 'react';
          import Head from 'next/head';
          
          export default function MedicalReport() {
            const [patientName, setPatientName] = useState('');
            const [age, setAge] = useState('');
            const [diagnosis, setDiagnosis] = useState('');
            const [medication, setMedication] = useState('');
            const [doctorName, setDoctorName] = useState('');
          
            const handleSubmit = (e) => {
              e.preventDefault();
              // You can handle form submission here, for now, let's just log the data
              console.log({
                patientName,
                age,
                diagnosis,
                medication,
                doctorName
              });
            };
          
            return (
              <div>
                <Head>
                  <title>Medical Report</title>
                  <meta name="description" content="Sample medical report page" />
                  <link rel="icon" href="/favicon.ico" />
                </Head>
          
                <main>
                  <h1>Medical Report</h1>
                  <form onSubmit={handleSubmit}>
                    <label>
                      Patient Name:
                      <input
                        type="text"
                        value={patientName}
                        onChange={(e) => setPatientName(e.target.value)}
                      />
                    </label>
                    <label>
                      Age:
                      <input
                        type="number"
                        value={age}
                        onChange={(e) => setAge(e.target.value)}
                      />
                    </label>
                    <label>
                      Diagnosis:
                      <textarea
                        value={diagnosis}
                        onChange={(e) => setDiagnosis(e.target.value)}
                      ></textarea>
                    </label>
                    <label>
                      Medication:
                      <textarea
                        value={medication}
                        onChange={(e) => setMedication(e.target.value)}
                      ></textarea>
                    </label>
                    <label>
                      Doctor's Name:
                      <input
                        type="text"
                        value={doctorName}
                        onChange={(e) => setDoctorName(e.target.value)}
                      />
                    </label>
                    <button type="submit">Submit</button>
                  </form>
                </main>
              </div>
            );
          }
          
          <div className="card min-h-12 w-96 bg-base-100 shadow-xl">
              <figure className="">
                  <img src={data.image}></img>
                </figure>
              <div className="card-body">
                <p className="font-semibold text-lg text-center">{data.name}</p>
                <p>Address: {data.walletAddress}</p>

              </div>
              <div className="card-actions justify-center mb-4">
                {data.whitelisted ? 
                <button className="btn btn-info" onClick={() => handleWhiteList(false)}>Remove</button>
                :
                <button className="btn btn-success" onClick={() => handleWhiteList(true)}>Whitelist</button>
                }
              </div>
            </div>

              function handleWhiteList(value: boolean): void {
                setData((prev: Doctor | null) => {
                  if (!prev) return null; // Handle the case where prev is null
                  return { ...prev, whitelisted: value };
                  });
              }